// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package typestest;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/api/typestest";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// ResourceHeader is a shared resource header
// used in cases when only type and name is known
message ResourceHeader {
  // Kind is a resource kind
  string Kind = 1 [(gogoproto.jsontag) = "kind,omitempty"];
  // SubKind is an optional resource sub kind, used in some resources
  string SubKind = 2 [(gogoproto.jsontag) = "sub_kind,omitempty"];
  // Version is version
  string Version = 3 [(gogoproto.jsontag) = "version,omitempty"];
  // Metadata is resource metadata
  Metadata Metadata = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "metadata,omitempty"
  ];
}

// Metadata is resource metadata
message Metadata {
  // Name is an object name
  string Name = 1 [(gogoproto.jsontag) = "name"];
  // Namespace is object namespace. The field should be called "namespace"
  // when it returns in Teleport 2.4.
  string Namespace = 2 [(gogoproto.jsontag) = "-"];
  // Description is object description
  string Description = 3 [(gogoproto.jsontag) = "description,omitempty"];
  // Labels is a set of labels
  map<string, string> Labels = 5 [(gogoproto.jsontag) = "labels,omitempty"];
  // Expires is a global expiry time header can be set on any resource in the
  // system.
  google.protobuf.Timestamp Expires = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = true,
    (gogoproto.jsontag) = "expires,omitempty"
  ];
  // ID is a record ID.
  // Deprecated: Use revision instead.
  int64 ID = 7 [
    deprecated = true,
    (gogoproto.jsontag) = "id,omitempty"
  ];
  // Revision is an opaque identifier which tracks the versions of a resource
  // over time. Clients should ignore and not alter its value but must return
  // the revision in any updates of a resource.
  string Revision = 8 [(gogoproto.jsontag) = "revision,omitempty"];
}

// CommandLabelV2 is a label that has a value as a result of the
// output generated by running command, e.g. hostname
message CommandLabelV2 {
  // Period is a time between command runs
  int64 Period = 1 [
    (gogoproto.jsontag) = "period",
    (gogoproto.casttype) = "Duration"
  ];
  // Command is a command to run
  repeated string Command = 2 [(gogoproto.jsontag) = "command"];
  // Result captures standard output
  string Result = 3 [(gogoproto.jsontag) = "result"];
}

// DatabaseSpecV3 is the database spec.
message DatabaseSpecV3 {
  // Protocol is the database protocol: postgres, mysql, mongodb, etc.
  string Protocol = 1 [(gogoproto.jsontag) = "protocol"];
  // URI is the database connection endpoint.
  string URI = 2 [(gogoproto.jsontag) = "uri"];
  // CACert is the PEM-encoded database CA certificate.
  //
  // DEPRECATED: Moved to TLS.CACert. DELETE IN 10.0.
  string CACert = 3 [
    (gogoproto.jsontag) = "ca_cert,omitempty",
    deprecated = true
  ];
  // DynamicLabels is the database dynamic labels.
  map<string, CommandLabelV2> DynamicLabels = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "dynamic_labels,omitempty"
  ];
  // AWS contains AWS specific settings for RDS/Aurora/Redshift databases.
  AWS AWS = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "aws,omitempty"
  ];
  // GCP contains parameters specific to GCP Cloud SQL databases.
  GCPCloudSQL GCP = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "gcp,omitempty"
  ];
  // Azure contains Azure specific database metadata.
  Azure Azure = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "azure,omitempty"
  ];
  // TLS is the TLS configuration used when establishing connection to target database.
  // Allows to provide custom CA cert or override server name.
  DatabaseTLS TLS = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "tls,omitempty"
  ];
  // AD is the Active Directory configuration for the database.
  AD AD = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "ad,omitempty"
  ];
  // MySQL is an additional section with MySQL database options.
  MySQLOptions MySQL = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "mysql,omitempty"
  ];
  // AdminUser is the database admin user for automatic user provisioning.
  DatabaseAdminUser AdminUser = 11 [(gogoproto.jsontag) = "admin_user,omitempty"];
  // MongoAtlas contains Atlas metadata about the database.
  MongoAtlas MongoAtlas = 12 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "mongo_atlas,omitempty"
  ];
  // Oracle is an additional Oracle configuration options.
  OracleOptions Oracle = 13 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "oracle,omitempty"
  ];
}

// DatabaseV3 represents a single proxied database.
message DatabaseV3 {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // Kind is the database resource kind.
  string Kind = 1 [(gogoproto.jsontag) = "kind"];
  // SubKind is an optional resource subkind.
  string SubKind = 2 [(gogoproto.jsontag) = "sub_kind,omitempty"];
  // Version is the resource version.
  string Version = 3 [(gogoproto.jsontag) = "version"];
  // Metadata is the database metadata.
  Metadata Metadata = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "metadata"
  ];
  // Spec is the database spec.
  DatabaseSpecV3 Spec = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "spec"
  ];
  // Status is the database runtime information.
  DatabaseStatusV3 Status = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "status"
  ];
}

// DatabaseServerV3 represents a database access server.
message DatabaseServerV3 {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // Kind is the database server resource kind.
  string Kind = 1 [(gogoproto.jsontag) = "kind"];
  // SubKind is an optional resource subkind.
  string SubKind = 2 [(gogoproto.jsontag) = "sub_kind,omitempty"];
  // Version is the resource version.
  string Version = 3 [(gogoproto.jsontag) = "version"];
  // Metadata is the database server metadata.
  Metadata Metadata = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "metadata"
  ];
  // Spec is the database server spec.
  DatabaseServerSpecV3 Spec = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "spec"
  ];
}

// DatabaseServerSpecV3 is the database server spec.
message DatabaseServerSpecV3 {
  reserved 1; // Description
  reserved "Description";
  reserved 2; // Protocol
  reserved "Protocol";
  reserved 3; // URI
  reserved "URI";
  reserved 4; // CACert
  reserved "CACert";
  reserved 5; // AWS
  reserved "AWS";
  reserved 9; // DynamicLabels
  reserved "DynamicLabels";
  reserved 11; // GCP
  reserved "GCP";

  // Version is the Teleport version that the server is running.
  string Version = 6 [(gogoproto.jsontag) = "version"];
  // Hostname is the database server hostname.
  string Hostname = 7 [(gogoproto.jsontag) = "hostname"];
  // HostID is the ID of the host the database server is running on.
  string HostID = 8 [(gogoproto.jsontag) = "host_id"];
  // Rotation contains the server CA rotation information.
  Rotation Rotation = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "rotation,omitempty"
  ];
  // Database is the database proxied by this database server.
  DatabaseV3 Database = 12 [(gogoproto.jsontag) = "database,omitempty"];
  // ProxyIDs is a list of proxy IDs this server is expected to be connected to.
  repeated string ProxyIDs = 13 [(gogoproto.jsontag) = "proxy_ids,omitempty"];
}

// DatabaseStatusV3 contains runtime information about the database.
message DatabaseStatusV3 {
  // CACert is the auto-downloaded cloud database CA certificate.
  string CACert = 1 [(gogoproto.jsontag) = "ca_cert,omitempty"];
  // AWS is the auto-discovered AWS cloud database metadata.
  AWS AWS = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "aws"
  ];
  // MySQL is an additional section with MySQL runtime database information.
  MySQLOptions MySQL = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "mysql,omitempty"
  ];
  // ManagedUsers is a list of database users that are managed by Teleport.
  repeated string ManagedUsers = 4 [(gogoproto.jsontag) = "managed_users,omitempty"];
  // Azure is the auto-discovered Azure cloud database metadata.
  Azure Azure = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "azure"
  ];
}

// AWS contains AWS metadata about the database.
message AWS {
  // Region is a AWS cloud region.
  string Region = 1 [(gogoproto.jsontag) = "region,omitempty"];
  // Redshift contains Redshift specific metadata.
  Redshift Redshift = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "redshift,omitempty"
  ];
  // RDS contains RDS specific metadata.
  RDS RDS = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "rds,omitempty"
  ];
  // AccountID is the AWS account ID this database belongs to.
  string AccountID = 4 [(gogoproto.jsontag) = "account_id,omitempty"];
  // ElastiCache contains AWS ElastiCache Redis specific metadata.
  ElastiCache ElastiCache = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "elasticache,omitempty"
  ];
  // SecretStore contains secret store configurations.
  SecretStore SecretStore = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "secret_store,omitempty"
  ];
  // MemoryDB contains AWS MemoryDB specific metadata.
  MemoryDB MemoryDB = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "memorydb,omitempty"
  ];
  // RDSProxy contains AWS Proxy specific metadata.
  RDSProxy RDSProxy = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "rdsproxy,omitempty"
  ];
  // RedshiftServerless contains AWS Redshift Serverless specific metadata.
  RedshiftServerless RedshiftServerless = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "redshift_serverless,omitempty"
  ];
  // ExternalID is an optional AWS external ID used to enable assuming an AWS role across accounts.
  string ExternalID = 10 [(gogoproto.jsontag) = "external_id,omitempty"];
  // AssumeRoleARN is an optional AWS role ARN to assume when accessing a database.
  // Set this field and ExternalID to enable access across AWS accounts.
  string AssumeRoleARN = 11 [(gogoproto.jsontag) = "assume_role_arn,omitempty"];
  // OpenSearch contains AWS OpenSearch specific metadata.
  OpenSearch OpenSearch = 12 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "opensearch,omitempty"
  ];

  reserved 13;
  reserved "IAMPolicyExists";

  // IAMPolicyStatus indicates whether the IAM Policy is configured properly for database access.
  // If not, the user must update the AWS profile identity to allow access to the Database.
  // Eg for an RDS Database: the underlying AWS profile allows for `rds-db:connect` for the Database.
  IAMPolicyStatus IAMPolicyStatus = 14 [(gogoproto.jsontag) = "iam_policy_status"];
}

// Header represents a single http header passed over to the proxied application.
message Header {
  // Name is the http header name.
  string Name = 1 [(gogoproto.jsontag) = "name"];
  // Value is the http header value.
  string Value = 2 [(gogoproto.jsontag) = "value"];
}

// DatabaseTLSMode represents the level of TLS verification performed by
// DB agent when connecting to a database.
enum DatabaseTLSMode {
  // VERIFY_FULL performs full certificate validation.
  VERIFY_FULL = 0;
  // VERIFY_CA works the same as VERIFY_FULL, but it skips the hostname check.
  VERIFY_CA = 1;
  // INSECURE accepts any certificate provided by server. This is the least secure option.
  INSECURE = 2;
}

// AzureRedis contains Azure Cache for Redis specific database metadata.
message AzureRedis {
  // ClusteringPolicy is the clustering policy for Redis Enterprise.
  string ClusteringPolicy = 1 [(gogoproto.jsontag) = "clustering_policy,omitempty"];
}

// IAMPolicyStatus represents states that describe if an AWS database
// has its IAM policy properly configured or not.
// This enum is set in a Sync.Map during an IAM task that checks for the
// validity of IAM policy, and the database gets updated with the value
// from this map during a heartbeat.
enum IAMPolicyStatus {
  // IAM_POLICY_STATUS_UNSPECIFIED represents a zero value where
  // nothing has been attempted yet.
  IAM_POLICY_STATUS_UNSPECIFIED = 0;
  // IAM_POLICY_STATUS_PENDING represents a state where iam policy status
  // is pending to be checked. This enum value is set at the start of
  // registering a database -> IAM setup (before the db heartbeat starts).
  //
  // This state was required for two reasons:
  //   1) To be able to tell apart from an older service that do not update
  //      the IAMPolicyStatus (in which case the enum value will remain the
  //      zero value).
  //   2) When starting a database, the heartbeat and its IAM task starts,
  //      and the heartbeat may run first before the IAM task finishes.
  IAM_POLICY_STATUS_PENDING = 1;
  // IAM_POLICY_STATUS_FAILED represents a state where an error occured
  // while checking for IAM policy status eg: no AWS credentials provider found
  // or the policy was misconfigured.
  IAM_POLICY_STATUS_FAILED = 2;
  // IAM_POLICY_STATUS_SUCCESS represents a state where IAM policy was configured
  // correctly.
  IAM_POLICY_STATUS_SUCCESS = 3;
}

// Redshift contains AWS Redshift specific database metadata.
message Redshift {
  // ClusterID is the Redshift cluster identifier.
  string ClusterID = 1 [(gogoproto.jsontag) = "cluster_id,omitempty"];
}

// RDS contains AWS RDS specific database metadata.
message RDS {
  // InstanceID is the RDS instance identifier.
  string InstanceID = 1 [(gogoproto.jsontag) = "instance_id,omitempty"];
  // ClusterID is the RDS cluster (Aurora) identifier.
  string ClusterID = 2 [(gogoproto.jsontag) = "cluster_id,omitempty"];
  // ResourceID is the RDS instance resource identifier (db-xxx).
  string ResourceID = 3 [(gogoproto.jsontag) = "resource_id,omitempty"];
  // IAMAuth indicates whether database IAM authentication is enabled.
  bool IAMAuth = 4 [(gogoproto.jsontag) = "iam_auth"];
  // Subnets is a list of subnets for the RDS instance.
  repeated string Subnets = 5 [(gogoproto.jsontag) = "subnets,omitempty"];
  // VPCID is the VPC where the RDS is running.
  string VPCID = 6 [(gogoproto.jsontag) = "vpc_id,omitempty"];
}

// ElastiCache contains AWS ElastiCache Redis specific metadata.
message ElastiCache {
  // ReplicationGroupID is the Redis replication group ID.
  string ReplicationGroupID = 1 [(gogoproto.jsontag) = "replication_group_id,omitempty"];
  // UserGroupIDs is a list of user group IDs.
  repeated string UserGroupIDs = 2 [(gogoproto.jsontag) = "user_group_ids,omitempty"];
  // TransitEncryptionEnabled indicates whether in-transit encryption (TLS) is enabled.
  bool TransitEncryptionEnabled = 3 [(gogoproto.jsontag) = "transit_encryption_enabled,omitempty"];
  // EndpointType is the type of the endpoint.
  string EndpointType = 4 [(gogoproto.jsontag) = "endpoint_type,omitempty"];
}

// SecretStore contains secret store configurations.
message SecretStore {
  // KeyPrefix specifies the secret key prefix.
  string KeyPrefix = 1 [(gogoproto.jsontag) = "key_prefix,omitempty"];
  // KMSKeyID specifies the AWS KMS key for encryption.
  string KMSKeyID = 2 [(gogoproto.jsontag) = "kms_key_id,omitempty"];
}

// MemoryDB contains AWS MemoryDB specific metadata.
message MemoryDB {
  // ClusterName is the name of the MemoryDB cluster.
  string ClusterName = 1 [(gogoproto.jsontag) = "cluster_name,omitempty"];
  // ACLName is the name of the ACL associated with the cluster.
  string ACLName = 2 [(gogoproto.jsontag) = "acl_name,omitempty"];
  // TLSEnabled indicates whether in-transit encryption (TLS) is enabled.
  bool TLSEnabled = 3 [(gogoproto.jsontag) = "tls_enabled,omitempty"];
  // EndpointType is the type of the endpoint.
  string EndpointType = 4 [(gogoproto.jsontag) = "endpoint_type,omitempty"];
}

// RDSProxy contains AWS RDS Proxy specific database metadata.
message RDSProxy {
  // Name is the identifier of an RDS Proxy.
  string Name = 1 [(gogoproto.jsontag) = "name,omitempty"];
  // CustomEndpointName is the identifier of an RDS Proxy custom endpoint.
  string CustomEndpointName = 2 [(gogoproto.jsontag) = "custom_endpoint_name,omitempty"];
  // ResourceID is the RDS instance resource identifier (prx-xxx).
  string ResourceID = 3 [(gogoproto.jsontag) = "resource_id,omitempty"];
}

// RedshiftServerless contains AWS Redshift Serverless specific metadata.
message RedshiftServerless {
  // WorkgroupName is the workgroup name.
  string WorkgroupName = 1 [(gogoproto.jsontag) = "workgroup_name,omitempty"];
  // EndpointName is the VPC endpoint name.
  string EndpointName = 2 [(gogoproto.jsontag) = "endpoint_name,omitempty"];
  // WorkgroupID is the workgroup ID.
  string WorkgroupID = 3 [(gogoproto.jsontag) = "workgroup_id,omitempty"];
}

// OpenSearch contains AWS OpenSearch specific metadata.
message OpenSearch {
  // DomainName is the name of the domain.
  string DomainName = 1 [(gogoproto.jsontag) = "domain_name,omitempty"];
  // DomainID is the ID of the domain.
  string DomainID = 2 [(gogoproto.jsontag) = "domain_id,omitempty"];
  // EndpointType is the type of the endpoint.
  string EndpointType = 3 [(gogoproto.jsontag) = "endpoint_type,omitempty"];
}

// GCPCloudSQL contains parameters specific to GCP Cloud SQL databases.
message GCPCloudSQL {
  // ProjectID is the GCP project ID the Cloud SQL instance resides in.
  string ProjectID = 1 [(gogoproto.jsontag) = "project_id,omitempty"];
  // InstanceID is the Cloud SQL instance ID.
  string InstanceID = 2 [(gogoproto.jsontag) = "instance_id,omitempty"];
}

// Azure contains Azure specific database metadata.
message Azure {
  // Name is the Azure database server name.
  string Name = 1 [(gogoproto.jsontag) = "name,omitempty"];
  // ResourceID is the Azure fully qualified ID for the resource.
  string ResourceID = 2 [(gogoproto.jsontag) = "resource_id,omitempty"];
  // Redis contains Azure Cache for Redis specific database metadata.
  AzureRedis Redis = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "redis,omitempty"
  ];
  // IsFlexiServer is true if the database is an Azure Flexible server.
  bool IsFlexiServer = 4 [(gogoproto.jsontag) = "is_flexi_server,omitempty"];
}

// DatabaseTLS contains TLS configuration options.
message DatabaseTLS {
  // Mode is a TLS connection mode. See DatabaseTLSMode for details.
  DatabaseTLSMode Mode = 1 [(gogoproto.jsontag) = "mode"];
  // CACert is an optional user provided CA certificate used for verifying
  // database TLS connection.
  string CACert = 2 [(gogoproto.jsontag) = "ca_cert,omitempty"];
  // ServerName allows to provide custom hostname. This value will override the
  // servername/hostname on a certificate during validation.
  string ServerName = 3 [(gogoproto.jsontag) = "server_name,omitempty"];
}

// AD contains Active Directory specific database configuration.
message AD {
  // KeytabFile is the path to the Kerberos keytab file.
  string KeytabFile = 1 [(gogoproto.jsontag) = "keytab_file,omitempty"];
  // Krb5File is the path to the Kerberos configuration file. Defaults to /etc/krb5.conf.
  string Krb5File = 2 [(gogoproto.jsontag) = "krb5_file,omitempty"];
  // Domain is the Active Directory domain the database resides in.
  string Domain = 3 [(gogoproto.jsontag) = "domain"];
  // SPN is the service principal name for the database.
  string SPN = 4 [(gogoproto.jsontag) = "spn"];
  // LDAPCert is a certificate from Windows LDAP/AD, optional; only for x509 Authentication.
  string LDAPCert = 5 [(gogoproto.jsontag) = "ldap_cert,omitempty"];
  // KDCHostName is the host name for a KDC for x509 Authentication.
  string KDCHostName = 6 [(gogoproto.jsontag) = "kdc_host_name,omitempty"];
}

// MySQLOptions are additional MySQL database options.
message MySQLOptions {
  // ServerVersion is the server version reported by DB proxy if the runtime information is
  // not available.
  string ServerVersion = 1 [(gogoproto.jsontag) = "server_version,omitempty"];
}

// DatabaseAdminUser contains information about privileged database user used
// for automatic user provisioning.
message DatabaseAdminUser {
  // Name is the username of the privileged database user.
  string Name = 1 [(gogoproto.jsontag) = "name"];
}

// MongoAtlas contains Atlas metadata about the database.
message MongoAtlas {
  // Name is the Atlas database instance name.
  string Name = 1 [(gogoproto.jsontag) = "name,omitempty"];
}

// OracleOptions contains information about privileged database user used
// for database audit.
message OracleOptions {
  // AuditUser is the Oracle database user privilege to access internal Oracle audit trail.
  string AuditUser = 1 [(gogoproto.jsontag) = "audit_user"];
}

// AppServerV3 represents a single proxied web app.
message AppServerV3 {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // Kind is the app server resource kind. Always "app_server".
  string Kind = 1 [(gogoproto.jsontag) = "kind"];
  // SubKind is an optional resource subkind.
  string SubKind = 2 [(gogoproto.jsontag) = "sub_kind,omitempty"];
  // Version is the resource version.
  string Version = 3 [(gogoproto.jsontag) = "version"];
  // Metadata is the app server metadata.
  Metadata Metadata = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "metadata"
  ];
  // Spec is the app server spec.
  AppServerSpecV3 Spec = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "spec"
  ];
}

// AppServerSpecV3 is the app access server spec.
message AppServerSpecV3 {
  // Version is the Teleport version that the server is running.
  string Version = 1 [(gogoproto.jsontag) = "version"];
  // Hostname is the app server hostname.
  string Hostname = 2 [(gogoproto.jsontag) = "hostname"];
  // HostID is the app server host uuid.
  string HostID = 3 [(gogoproto.jsontag) = "host_id"];
  // Rotation contains the app server CA rotation information.
  Rotation Rotation = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "rotation,omitempty"
  ];
  // App is the app proxied by this app server.
  AppV3 App = 5 [(gogoproto.jsontag) = "app"];
  // ProxyIDs is a list of proxy IDs this server is expected to be connected to.
  repeated string ProxyIDs = 6 [(gogoproto.jsontag) = "proxy_ids,omitempty"];
}

// AppV3 represents an app resource.
message AppV3 {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // Kind is the app resource kind. Always "app".
  string Kind = 1 [(gogoproto.jsontag) = "kind"];
  // SubKind is an optional resource subkind.
  string SubKind = 2 [(gogoproto.jsontag) = "sub_kind,omitempty"];
  // Version is the resource version.
  string Version = 3 [(gogoproto.jsontag) = "version"];
  // Metadata is the app resource metadata.
  Metadata Metadata = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "metadata"
  ];
  // Spec is the app resource spec.
  AppSpecV3 Spec = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "spec"
  ];
}

// AppSpecV3 is the AppV3 resource spec.
message AppSpecV3 {
  // URI is the web app endpoint.
  string URI = 1 [(gogoproto.jsontag) = "uri"];
  // PublicAddr is the public address the application is accessible at.
  string PublicAddr = 2 [(gogoproto.jsontag) = "public_addr,omitempty"];
  // DynamicLabels are the app's command labels.
  map<string, CommandLabelV2> DynamicLabels = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "dynamic_labels,omitempty"
  ];
  // InsecureSkipVerify disables app's TLS certificate verification.
  bool InsecureSkipVerify = 4 [(gogoproto.jsontag) = "insecure_skip_verify"];
  // Rewrite is a list of rewriting rules to apply to requests and responses.
  Rewrite Rewrite = 5 [(gogoproto.jsontag) = "rewrite,omitempty"];
  // AWS contains additional options for AWS applications.
  AppAWS AWS = 6 [(gogoproto.jsontag) = "aws,omitempty"];
  // Cloud identifies the cloud instance the app represents.
  string Cloud = 7 [(gogoproto.jsontag) = "cloud,omitempty"];
  // UserGroups are a list of user group IDs that this app is associated with.
  repeated string UserGroups = 8;
}

// Rewrite is a list of rewriting rules to apply to requests and responses.
message Rewrite {
  // Redirect defines a list of hosts which will be rewritten to the public
  // address of the application if they occur in the "Location" header.
  repeated string Redirect = 1 [(gogoproto.jsontag) = "redirect,omitempty"];
  // Headers is a list of headers to inject when passing the request over
  // to the application.
  repeated Header Headers = 2 [(gogoproto.jsontag) = "headers,omitempty"];
  // JWTClaims configures whether roles/traits are included in the JWT token.
  string JWTClaims = 3 [(gogoproto.jsontag) = "jwt_claims,omitempty"];
}

// AppAWS contains additional options for AWS applications.
message AppAWS {
  // ExternalID is the AWS External ID used when assuming roles in this app.
  string ExternalID = 1 [(gogoproto.jsontag) = "external_id,omitempty"];
}

// Rotation is a status of the rotation of the certificate authority
message Rotation {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // State could be one of "init" or "in_progress".
  string State = 1 [(gogoproto.jsontag) = "state,omitempty"];
  // Phase is the current rotation phase.
  string Phase = 2 [(gogoproto.jsontag) = "phase,omitempty"];
  // Mode sets manual or automatic rotation mode.
  string Mode = 3 [(gogoproto.jsontag) = "mode,omitempty"];
  // CurrentID is the ID of the rotation operation
  // to differentiate between rotation attempts.
  string CurrentID = 4 [(gogoproto.jsontag) = "current_id"];
  // Started is set to the time when rotation has been started
  // in case if the state of the rotation is "in_progress".
  google.protobuf.Timestamp Started = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.jsontag) = "started,omitempty"
  ];
  // GracePeriod is a period during which old and new CA
  // are valid for checking purposes, but only new CA is issuing certificates.
  int64 GracePeriod = 6 [
    (gogoproto.jsontag) = "grace_period,omitempty",
    (gogoproto.casttype) = "Duration"
  ];
  // LastRotated specifies the last time of the completed rotation.
  google.protobuf.Timestamp LastRotated = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.jsontag) = "last_rotated,omitempty"
  ];
  // Schedule is a rotation schedule - used in
  // automatic mode to switch between phases.
  RotationSchedule Schedule = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "schedule,omitempty"
  ];
}

// RotationSchedule is a rotation schedule setting time switches
// for different phases.
message RotationSchedule {
  // UpdateClients specifies time to switch to the "Update clients" phase
  google.protobuf.Timestamp UpdateClients = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.jsontag) = "update_clients,omitempty"
  ];
  // UpdateServers specifies time to switch to the "Update servers" phase.
  google.protobuf.Timestamp UpdateServers = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.jsontag) = "update_servers,omitempty"
  ];
  // Standby specifies time to switch to the "Standby" phase.
  google.protobuf.Timestamp Standby = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.jsontag) = "standby,omitempty"
  ];
}
